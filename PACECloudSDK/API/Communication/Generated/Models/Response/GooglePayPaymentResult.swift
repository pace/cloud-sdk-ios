//
// Generated by SwiftPoet
// https://github.com/outfoxx/swiftpoet
//
import Foundation

public extension API.Communication {
    /**
     * The Google Pay payment request to be handled (Android only). */
    struct GooglePayPaymentResponse: Codable {
        /**
         * Major API version. The value in the response matches the value provided in PaymentDataRequest. */
        public let apiVersion: Int
        /**
         * Minor API version. The value in the response matches the value provided in PaymentDataRequest. */
        public let apiVersionMinor: Int
        /**
         * Data about the selected payment method. */
        public let paymentMethodData: PaymentMethodData
        /**
         * Email address, if emailRequired is set to true in the PaymentDataRequest. If another request has the property set to true there's no effect. */
        public let email: String?
        /**
         * Shipping address, if shippingAddressRequired is set to true in the PaymentDataRequest. */
        public let shippingAddress: ShippingAddress?

        public init(
            apiVersion: Int,
            apiVersionMinor: Int,
            paymentMethodData: PaymentMethodData,
            email: String?,
            shippingAddress: ShippingAddress?
        ) {
            self.apiVersion = apiVersion
            self.apiVersionMinor = apiVersionMinor
            self.paymentMethodData = paymentMethodData
            self.email = email
            self.shippingAddress = shippingAddress
        }

        public struct PaymentMethodData: Codable {
            /**
             * PaymentMethod type selected in the Google Pay payment sheet. */
            public let type: String
            /**
             * The value of this property depends on the payment method type returned. Since we only support CARD for now, this object contains the CardInfo response. */
            public let info: Info
            /**
             * Payment tokenization data for the selected payment method. */
            public let tokenizationData: TokenizationData

            public init(type: String, info: Info, tokenizationData: TokenizationData) {
                self.type = type
                self.info = info
                self.tokenizationData = tokenizationData
            }

            public struct Info: Codable {
                /**
                 * The details about the card. This value is commonly the last four digits of the selected payment account number. */
                public let cardDetails: String?
                /**
                 * This object provides information about the validation performed on the returned payment data if assuranceDetailsRequired is set to true in the CardParameters. */
                public let assuranceDetails: AssuranceDetails?
                /**
                 * The payment card network of the selected payment. Returned values match the format of allowedCardNetworks in CardParameters. */
                public let cardNetwork: String?
                /**
                 * Shipping address, if shippingAddressRequired is set to true in the PaymentDataRequest. */
                public let billingAddress: BillingAddress?

                public init(cardDetails: String?, assuranceDetails: AssuranceDetails?, cardNetwork: String?, billingAddress: BillingAddress?) {
                    self.cardDetails = cardDetails
                    self.assuranceDetails = assuranceDetails
                    self.cardNetwork = cardNetwork
                    self.billingAddress = billingAddress
                }

                public struct AssuranceDetails: Codable {
                    /**
                     * If true, indicates that Cardholder possession validation has been performed on returned payment credential. */
                    public let accountVerified: Bool?
                    /**
                     * If true, indicates that identification and verifications (ID&V) was performed on the returned payment credential. If false, the same risk-based authentication can be performed as you would for card transactions. This risk-based authentication can include, but not limited to, step-up with 3D Secure protocol if applicable. */
                    public let cardHolderAuthenticated: Bool?

                    public init(accountVerified: Bool?, cardHolderAuthenticated: Bool?) {
                        self.accountVerified = accountVerified
                        self.cardHolderAuthenticated = cardHolderAuthenticated
                    }
                }

                public struct BillingAddress: Codable {
                    /**
                     * The full name of the addressee. */
                    public let name: String?
                    /**
                     * The postal or ZIP code. */
                    public let postalCode: String?
                    /**
                     * ISO 3166-1 alpha-2 country code. */
                    public let countryCode: String?
                    /**
                     * A telephone number, if phoneNumberRequired is set to true in the PaymentDataRequest. */
                    public let phoneNumber: String?
                    /**
                     * The first line of the address. */
                    public let address1: String?
                    /**
                     * The second line of the address. */
                    public let address2: String?
                    /**
                     * The third line of the address. */
                    public let address3: String?
                    /**
                     * City, town, neighborhood, or suburb. */
                    public let locality: String?
                    /**
                     * A country subdivision, such as a state or province. */
                    public let administrativeArea: String?
                    /**
                     * The sorting code. */
                    public let sortingCode: String?

                    public init(
                        name: String?,
                        postalCode: String?,
                        countryCode: String?,
                        phoneNumber: String?,
                        address1: String?,
                        address2: String?,
                        address3: String?,
                        locality: String?,
                        administrativeArea: String?,
                        sortingCode: String?
                    ) {
                        self.name = name
                        self.postalCode = postalCode
                        self.countryCode = countryCode
                        self.phoneNumber = phoneNumber
                        self.address1 = address1
                        self.address2 = address2
                        self.address3 = address3
                        self.locality = locality
                        self.administrativeArea = administrativeArea
                        self.sortingCode = sortingCode
                    }
                }
            }

            public struct TokenizationData: Codable {
                /**
                 * The type of tokenization to be applied to the selected payment method. This value matches the type set in PaymentMethodTokenizationSpecification. */
                public let type: String
                /**
                 * The generated payment method token. */
                public let token: String?

                public init(type: String, token: String?) {
                    self.type = type
                    self.token = token
                }
            }
        }

        public struct ShippingAddress: Codable {
            /**
             * The full name of the addressee. */
            public let name: String?
            /**
             * The postal or ZIP code. */
            public let postalCode: String?
            /**
             * ISO 3166-1 alpha-2 country code. */
            public let countryCode: String?
            /**
             * A telephone number, if phoneNumberRequired is set to true in the PaymentDataRequest. */
            public let phoneNumber: String?
            /**
             * The first line of the address. */
            public let address1: String?
            /**
             * The second line of the address. */
            public let address2: String?
            /**
             * The third line of the address. */
            public let address3: String?
            /**
             * City, town, neighborhood, or suburb. */
            public let locality: String?
            /**
             * A country subdivision, such as a state or province. */
            public let administrativeArea: String?
            /**
             * The sorting code. */
            public let sortingCode: String?

            public init(
                name: String?,
                postalCode: String?,
                countryCode: String?,
                phoneNumber: String?,
                address1: String?,
                address2: String?,
                address3: String?,
                locality: String?,
                administrativeArea: String?,
                sortingCode: String?
            ) {
                self.name = name
                self.postalCode = postalCode
                self.countryCode = countryCode
                self.phoneNumber = phoneNumber
                self.address1 = address1
                self.address2 = address2
                self.address3 = address3
                self.locality = locality
                self.administrativeArea = administrativeArea
                self.sortingCode = sortingCode
            }
        }
    }
}

extension API.Communication {
    class GooglePayPaymentError: Error {}

    class GooglePayPaymentResult: Result {
        init(_ success: Success) {
            super.init(status: 200, body: .init(success.response))
        }

        init(_ failure: Failure) {
            super.init(status: failure.statusCode.rawValue, body: .init(failure.response))
        }

        struct Success {
            let response: GooglePayPaymentResponse
        }

        struct Failure {
            let statusCode: StatusCode
            let response: GooglePayPaymentError

            enum StatusCode: Int {
                case badRequest = 400
                case requestTimeout = 408
                case clientClosedRequest = 499
                case internalServerError = 500
            }
        }
    }
}
