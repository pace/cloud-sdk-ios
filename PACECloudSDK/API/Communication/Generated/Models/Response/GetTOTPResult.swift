//
// Generated by SwiftPoet
// https://github.com/outfoxx/swiftpoet
//
import Foundation

public extension API.Communication {
    /**
     * Return a TOTP generated by previously saved TOTP secret data for the specified key. The user should authenticate the access to the secret data e.g. with biometric authentication. */
    struct GetTOTPResponse: Codable {
        /**
         * The generated TOTP. */
        public let totp: String
        /**
         * The biometric method used to generate the TOTP:
         *   * `fingerprint` - Fingerprint authentication was used.
         *   * `face` - Face recognition was used.
         *   * `other` - For all other cases. Also use this if the biometric method could not be detected.
         */
        public let biometryMethod: String

        public init(totp: String, biometryMethod: String) {
            self.totp = totp
            self.biometryMethod = biometryMethod
        }
    }
}

extension API.Communication {
    class GetTOTPError: Error {}

    class GetTOTPResult: Result {
        init(_ success: Success) {
            super.init(status: 200, body: .init(success.response))
        }

        init(_ failure: Failure) {
            super.init(status: failure.statusCode.rawValue, body: .init(failure.response))
        }

        struct Success {
            let response: GetTOTPResponse
        }

        struct Failure {
            let statusCode: StatusCode
            let response: GetTOTPError

            enum StatusCode: Int {
                case badRequest = 400
                case unauthorized = 401
                case notFound = 404
                case methodNotAllowed = 405
                case requestTimeout = 408
                case internalServerError = 500
            }
        }
    }
}
