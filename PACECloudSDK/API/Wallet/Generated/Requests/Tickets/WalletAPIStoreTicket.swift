//
// Generated by SwagGen
// https://github.com/pace/SwagGen
//

import Foundation

extension WalletAPI.Tickets {

    /** Stores a ticket in the users wallet and returns it */
    public enum StoreTicket {

        public static var service = WalletAPIService<Response>(id: "StoreTicket", tag: "Tickets", method: "POST", path: "/2023-3/tickets", hasBody: true, securityRequirements: [SecurityRequirement(type: "keycloak", scopes: ["wallet:tickets:create"])])

        public final class Request: WalletAPIRequest<Response> {

            public var body: PCWalletTicketCreateParamsRequest

            public init(body: PCWalletTicketCreateParamsRequest, encoder: RequestEncoder? = nil) {
                self.body = body
                super.init(service: StoreTicket.service) { defaultEncoder in
                    return try (encoder ?? defaultEncoder).encode(body)
                }
                self.contentType = "application/json"
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = PCWalletTicket

            /** Successfully created ticket */
            case status201(PCWalletTicket)

            /** the client is not authenticated */
            case status401(PCWalletUnauthorizedErrorResponse)

            /** the client is missing a required scope */
            case status403(PCWalletForbiddenErrorResponse)

            /** the request body is invalid */
            case status422(PCWalletValidationErrorResponse)

            public var success: PCWalletTicket? {
                switch self {
                case .status201(let response): return response
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                case .status201(let response): return response
                case .status401(let response): return response
                case .status403(let response): return response
                case .status422(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status201: return 201
                case .status401: return 401
                case .status403: return 403
                case .status422: return 422
                }
            }

            public var successful: Bool {
                switch self {
                case .status201: return true
                case .status401: return false
                case .status403: return false
                case .status422: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 201: self = try .status201(decoder.decode(PCWalletTicket.self, from: data))
                case 401: self = try .status401(decoder.decode(PCWalletUnauthorizedErrorResponse.self, from: data))
                case 403: self = try .status403(decoder.decode(PCWalletForbiddenErrorResponse.self, from: data))
                case 422: self = try .status422(decoder.decode(PCWalletValidationErrorResponse.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
