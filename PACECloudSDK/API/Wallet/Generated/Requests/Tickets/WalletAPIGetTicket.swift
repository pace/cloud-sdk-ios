//
// Generated by SwagGen
// https://github.com/pace/SwagGen
//

import Foundation

extension WalletAPI.Tickets {

    /** Return a ticket with a given id for the requesting user */
    public enum GetTicket {

        public static var service = WalletAPIService<Response>(id: "GetTicket", tag: "Tickets", method: "GET", path: "/2023-3/tickets/{id}", hasBody: false, securityRequirements: [SecurityRequirement(type: "keycloak", scopes: ["wallet:tickets:read"])])

        public final class Request: WalletAPIRequest<Response> {

            public struct Options {

                /** the tickets identifier */
                public var id: String

                public init(id: String) {
                    self.id = id
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetTicket.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(id: String) {
                let options = Options(id: id)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "id" + "}", with: "\(self.options.id)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = PCWalletGetTicketResponse

            /** ticket of the user with the given id */
            case status200(PCWalletGetTicketResponse)

            /** the client is not authenticated */
            case status401(PCWalletUnauthorizedErrorResponse)

            /** the client is missing a required scope */
            case status403(PCWalletForbiddenErrorResponse)

            /** no ticket found for the given id */
            case status404(PCWalletResourceNotFoundErrorResponse)

            public var success: PCWalletGetTicketResponse? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .status401(let response): return response
                case .status403(let response): return response
                case .status404(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status401: return 401
                case .status403: return 403
                case .status404: return 404
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status401: return false
                case .status403: return false
                case .status404: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(PCWalletGetTicketResponse.self, from: data))
                case 401: self = try .status401(decoder.decode(PCWalletUnauthorizedErrorResponse.self, from: data))
                case 403: self = try .status403(decoder.decode(PCWalletForbiddenErrorResponse.self, from: data))
                case 404: self = try .status404(decoder.decode(PCWalletResourceNotFoundErrorResponse.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
