//
// Generated by SwagGen
// https://github.com/pace/SwagGen
//

import Foundation

public class PCUserOTPRequest: APIModel {

    /** the one time password type to validate against. If none provided all default types are checked.
    * `login` login otp ([created and send via email](#operation/SendUsersLoginOTP))
    * `account` user account otp ([created on demand via pin / password](#operation/CreateOTP).)
    * `totp` user provided TOTP (authenticator)
    * `device-totp` device TOTP ([e.g. PACE Drive App, PACE Car App](#operation/CreateTOTP))
     */
    public enum PCUserTypes: String, Codable, Equatable, CaseIterable {
        case login = "login"
        case account = "account"
        case totp = "totp"
        case deviceTotp = "device-totp"
    }

    /** one time password */
    public var otp: String?

    /** the one time password type to validate against. If none provided all default types are checked.
* `login` login otp ([created and send via email](#operation/SendUsersLoginOTP))
* `account` user account otp ([created on demand via pin / password](#operation/CreateOTP).)
* `totp` user provided TOTP (authenticator)
* `device-totp` device TOTP ([e.g. PACE Drive App, PACE Car App](#operation/CreateTOTP))
 */
    public var types: [PCUserTypes]?

    public init(otp: String? = nil, types: [PCUserTypes]? = nil) {
        self.otp = otp
        self.types = types
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        otp = try container.decodeIfPresent("otp")
        types = try container.decodeArrayIfPresent("types")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(otp, forKey: "otp")
        try container.encodeIfPresent(types, forKey: "types")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? PCUserOTPRequest else { return false }
      guard self.otp == object.otp else { return false }
      guard self.types == object.types else { return false }
      return true
    }

    public static func == (lhs: PCUserOTPRequest, rhs: PCUserOTPRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
