//
// Generated by SwagGen
// https://github.com/pace/SwagGen
//

import Foundation

public class PCUserAccessToken: APIModel {

    public var accessToken: String?

    /** Number of seconds the token is valid */
    public var expiresIn: Int?

    /** Optional. Token for refreshing this grant */
    public var refreshToken: String?

    public var scope: String?

    public var tokenType: String?

    public init(accessToken: String? = nil, expiresIn: Int? = nil, refreshToken: String? = nil, scope: String? = nil, tokenType: String? = nil) {
        self.accessToken = accessToken
        self.expiresIn = expiresIn
        self.refreshToken = refreshToken
        self.scope = scope
        self.tokenType = tokenType
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        accessToken = try container.decodeIfPresent("access_token")
        expiresIn = try container.decodeIfPresent("expires_in")
        refreshToken = try container.decodeIfPresent("refresh_token")
        scope = try container.decodeIfPresent("scope")
        tokenType = try container.decodeIfPresent("token_type")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(accessToken, forKey: "access_token")
        try container.encodeIfPresent(expiresIn, forKey: "expires_in")
        try container.encodeIfPresent(refreshToken, forKey: "refresh_token")
        try container.encodeIfPresent(scope, forKey: "scope")
        try container.encodeIfPresent(tokenType, forKey: "token_type")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? PCUserAccessToken else { return false }
      guard self.accessToken == object.accessToken else { return false }
      guard self.expiresIn == object.expiresIn else { return false }
      guard self.refreshToken == object.refreshToken else { return false }
      guard self.scope == object.scope else { return false }
      guard self.tokenType == object.tokenType else { return false }
      return true
    }

    public static func == (lhs: PCUserAccessToken, rhs: PCUserAccessToken) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
