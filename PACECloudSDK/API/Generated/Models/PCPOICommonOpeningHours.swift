//
// Generated by SwagGen
// https://github.com/pace/SwagGen
//

import Foundation

public class PCPOICommonOpeningHours: APIModel {

    public var rules: [Rules]?

    /** As defined by ISO 8601, the timezone */
    public var timezone: String?

    public class Rules: APIModel {

        public enum PCPOIAction: String, Codable, Equatable, CaseIterable {
            case `open` = "open"
            case close = "close"
        }

        public enum PCPOIDays: String, Codable, Equatable, CaseIterable {
            case monday = "monday"
            case tuesday = "tuesday"
            case wednesday = "wednesday"
            case thursday = "thursday"
            case friday = "friday"
            case saturday = "saturday"
            case sunday = "sunday"
        }

        public var action: PCPOIAction?

        public var days: [PCPOIDays]?

        public var timespans: [Timespans]?

        public class Timespans: APIModel {

            /** relative to the specified time zone (local time) */
            public var from: String?

            /** relative to the specified time zone (local time) */
            public var to: String?

            public init(from: String? = nil, to: String? = nil) {
                self.from = from
                self.to = to
            }

            public required init(from decoder: Decoder) throws {
                let container = try decoder.container(keyedBy: StringCodingKey.self)

                from = try container.decodeIfPresent("from")
                to = try container.decodeIfPresent("to")
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.container(keyedBy: StringCodingKey.self)

                try container.encodeIfPresent(from, forKey: "from")
                try container.encodeIfPresent(to, forKey: "to")
            }

            public func isEqual(to object: Any?) -> Bool {
              guard let object = object as? Timespans else { return false }
              guard self.from == object.from else { return false }
              guard self.to == object.to else { return false }
              return true
            }

            public static func == (lhs: Timespans, rhs: Timespans) -> Bool {
                return lhs.isEqual(to: rhs)
            }
        }

        public init(action: PCPOIAction? = nil, days: [PCPOIDays]? = nil, timespans: [Timespans]? = nil) {
            self.action = action
            self.days = days
            self.timespans = timespans
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            action = try container.decodeIfPresent("action")
            days = try container.decodeArrayIfPresent("days")
            timespans = try container.decodeArrayIfPresent("timespans")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encodeIfPresent(action, forKey: "action")
            try container.encodeIfPresent(days, forKey: "days")
            try container.encodeIfPresent(timespans, forKey: "timespans")
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Rules else { return false }
          guard self.action == object.action else { return false }
          guard self.days == object.days else { return false }
          guard self.timespans == object.timespans else { return false }
          return true
        }

        public static func == (lhs: Rules, rhs: Rules) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(rules: [Rules]? = nil, timezone: String? = nil) {
        self.rules = rules
        self.timezone = timezone
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        rules = try container.decodeArrayIfPresent("rules")
        timezone = try container.decodeIfPresent("timezone")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(rules, forKey: "rules")
        try container.encodeIfPresent(timezone, forKey: "timezone")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? PCPOICommonOpeningHours else { return false }
      guard self.rules == object.rules else { return false }
      guard self.timezone == object.timezone else { return false }
      return true
    }

    public static func == (lhs: PCPOICommonOpeningHours, rhs: PCPOICommonOpeningHours) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
