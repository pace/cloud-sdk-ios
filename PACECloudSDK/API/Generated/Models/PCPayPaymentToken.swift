//
// Generated by SwagGen
// https://github.com/pace/SwagGen
//

import Foundation

public class PCPayPaymentToken: APIModel {

    public enum PCPayType: String, Codable, Equatable, CaseIterable {
        case paymentToken = "paymentToken"
    }

    /** Payment Token ID */
    public var id: String?

    public var type: PCPayType?

    public var paymentMethod: PCPayPaymentMethod?

    /** PACE resource name of the accountPRN that this is being charged to. */
    public var accountPRN: String?

    /** The amount that this token represents. */
    public var amount: Decimal?

    /** Currency as specified in ISO-4217. */
    public var currency: String?

    /** PACE resource name(s) of one or multiple resources, for which the payment was authorized. */
    public var purposePRNs: [String]?

    /** The datetime (iso8601) after which the token is no longer valid. May not be provided. */
    public var validUntil: DateTime?

    /** paymentToken value. Format might change (externally provided - by payment provider) */
    public var value: String?

    public init(id: String? = nil, type: PCPayType? = nil, paymentMethod: PCPayPaymentMethod? = nil, accountPRN: String? = nil, amount: Decimal? = nil, currency: String? = nil, purposePRNs: [String]? = nil, validUntil: DateTime? = nil, value: String? = nil) {
        self.id = id
        self.type = type
        self.paymentMethod = paymentMethod
        self.accountPRN = accountPRN
        self.amount = amount
        self.currency = currency
        self.purposePRNs = purposePRNs
        self.validUntil = validUntil
        self.value = value
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        id = try container.decodeIfPresent("id")
        type = try container.decodeIfPresent("type")
        paymentMethod = try container.decodeIfPresent("paymentMethod")
        accountPRN = try container.decodeIfPresent("accountPRN")
        amount = try container.decodeLosslessDecimal("amount")
        currency = try container.decodeIfPresent("currency")
        purposePRNs = try container.decodeArrayIfPresent("purposePRNs")
        validUntil = try container.decodeIfPresent("validUntil")
        value = try container.decodeIfPresent("value")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(type, forKey: "type")
        try container.encodeIfPresent(paymentMethod, forKey: "paymentMethod")
        try container.encodeIfPresent(accountPRN, forKey: "accountPRN")
        try container.encodeIfPresent(amount, forKey: "amount")
        try container.encodeIfPresent(currency, forKey: "currency")
        try container.encodeIfPresent(purposePRNs, forKey: "purposePRNs")
        try container.encodeIfPresent(validUntil, forKey: "validUntil")
        try container.encodeIfPresent(value, forKey: "value")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? PCPayPaymentToken else { return false }
      guard self.id == object.id else { return false }
      guard self.type == object.type else { return false }
      guard self.paymentMethod == object.paymentMethod else { return false }
      guard self.accountPRN == object.accountPRN else { return false }
      guard self.amount == object.amount else { return false }
      guard self.currency == object.currency else { return false }
      guard self.purposePRNs == object.purposePRNs else { return false }
      guard self.validUntil == object.validUntil else { return false }
      guard self.value == object.value else { return false }
      return true
    }

    public static func == (lhs: PCPayPaymentToken, rhs: PCPayPaymentToken) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
