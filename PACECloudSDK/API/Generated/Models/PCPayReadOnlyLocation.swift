//
// Generated by SwagGen
// https://github.com/pace/SwagGen
//

import Foundation

public class PCPayReadOnlyLocation: APIModel {

    public var address: Address?

    public var brand: String?

    public var brandId: String?

    public var latitude: Float?

    public var longitude: Float?

    public var stationName: String?

    public class Address: APIModel {

        public var city: String?

        /** Country code in as specified in ISO 3166-1. */
        public var countryCode: String?

        public var houseNo: String?

        public var postalCode: String?

        public var street: String?

        public init(city: String? = nil, countryCode: String? = nil, houseNo: String? = nil, postalCode: String? = nil, street: String? = nil) {
            self.city = city
            self.countryCode = countryCode
            self.houseNo = houseNo
            self.postalCode = postalCode
            self.street = street
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            city = try container.decodeIfPresent("city")
            countryCode = try container.decodeIfPresent("countryCode")
            houseNo = try container.decodeIfPresent("houseNo")
            postalCode = try container.decodeIfPresent("postalCode")
            street = try container.decodeIfPresent("street")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encodeIfPresent(city, forKey: "city")
            try container.encodeIfPresent(countryCode, forKey: "countryCode")
            try container.encodeIfPresent(houseNo, forKey: "houseNo")
            try container.encodeIfPresent(postalCode, forKey: "postalCode")
            try container.encodeIfPresent(street, forKey: "street")
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Address else { return false }
          guard self.city == object.city else { return false }
          guard self.countryCode == object.countryCode else { return false }
          guard self.houseNo == object.houseNo else { return false }
          guard self.postalCode == object.postalCode else { return false }
          guard self.street == object.street else { return false }
          return true
        }

        public static func == (lhs: Address, rhs: Address) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(address: Address? = nil, brand: String? = nil, brandId: String? = nil, latitude: Float? = nil, longitude: Float? = nil, stationName: String? = nil) {
        self.address = address
        self.brand = brand
        self.brandId = brandId
        self.latitude = latitude
        self.longitude = longitude
        self.stationName = stationName
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        address = try container.decodeIfPresent("address")
        brand = try container.decodeIfPresent("brand")
        brandId = try container.decodeIfPresent("brandId")
        latitude = try container.decodeIfPresent("latitude")
        longitude = try container.decodeIfPresent("longitude")
        stationName = try container.decodeIfPresent("stationName")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(address, forKey: "address")
        try container.encodeIfPresent(brand, forKey: "brand")
        try container.encodeIfPresent(brandId, forKey: "brandId")
        try container.encodeIfPresent(latitude, forKey: "latitude")
        try container.encodeIfPresent(longitude, forKey: "longitude")
        try container.encodeIfPresent(stationName, forKey: "stationName")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? PCPayReadOnlyLocation else { return false }
      guard self.address == object.address else { return false }
      guard self.brand == object.brand else { return false }
      guard self.brandId == object.brandId else { return false }
      guard self.latitude == object.latitude else { return false }
      guard self.longitude == object.longitude else { return false }
      guard self.stationName == object.stationName else { return false }
      return true
    }

    public static func == (lhs: PCPayReadOnlyLocation, rhs: PCPayReadOnlyLocation) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
