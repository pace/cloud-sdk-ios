//
// Generated by SwagGen
// https://github.com/pace/SwagGen
//

import Foundation

public class PCPayFuel: APIModel {

    /** Fuel type for cars, based on the EU fuel marking */
    public enum PCPayType: String, Codable, Equatable, CaseIterable {
        case ron98 = "ron98"
        case ron98e5 = "ron98e5"
        case ron95e10 = "ron95e10"
        case diesel = "diesel"
        case e85 = "e85"
        case ron91 = "ron91"
        case ron95e5 = "ron95e5"
        case ron100 = "ron100"
        case dieselGtl = "dieselGtl"
        case dieselB0 = "dieselB0"
        case dieselB7 = "dieselB7"
        case dieselB15 = "dieselB15"
        case dieselPremium = "dieselPremium"
        case lpg = "lpg"
        case cng = "cng"
        case lng = "lng"
        case h2 = "h2"
        case truckDiesel = "truckDiesel"
        case adBlue = "adBlue"
        case truckAdBlue = "truckAdBlue"
        case truckDieselPremium = "truckDieselPremium"
        case truckLpg = "truckLpg"
        case heatingOil = "heatingOil"
    }

    /** Unit */
    public enum PCPayUnit: String, Codable, Equatable, CaseIterable {
        case liter = "liter"
        case gallon = "gallon"
    }

    /** Fuel amount in provided unit */
    public var amount: Decimal?

    /** Price per unit (with three decimal places) */
    public var pricePerUnit: Decimal?

    /** Product Name of the current fuel.productName */
    public var productName: String?

    /** Number of the pump used for fueling, i.e., the actual number that is being displayed to the customer */
    public var pumpNumber: Int?

    /** Fuel type for cars, based on the EU fuel marking */
    public var type: PCPayType?

    /** Unit */
    public var unit: PCPayUnit?

    public init(amount: Decimal? = nil, pricePerUnit: Decimal? = nil, productName: String? = nil, pumpNumber: Int? = nil, type: PCPayType? = nil, unit: PCPayUnit? = nil) {
        self.amount = amount
        self.pricePerUnit = pricePerUnit
        self.productName = productName
        self.pumpNumber = pumpNumber
        self.type = type
        self.unit = unit
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        amount = try container.decodeIfPresent("amount")
        pricePerUnit = try container.decodeIfPresent("pricePerUnit")
        productName = try container.decodeIfPresent("productName")
        pumpNumber = try container.decodeIfPresent("pumpNumber")
        type = try container.decodeIfPresent("type")
        unit = try container.decodeIfPresent("unit")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(amount, forKey: "amount")
        try container.encodeIfPresent(pricePerUnit, forKey: "pricePerUnit")
        try container.encodeIfPresent(productName, forKey: "productName")
        try container.encodeIfPresent(pumpNumber, forKey: "pumpNumber")
        try container.encodeIfPresent(type, forKey: "type")
        try container.encodeIfPresent(unit, forKey: "unit")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? PCPayFuel else { return false }
      guard self.amount == object.amount else { return false }
      guard self.pricePerUnit == object.pricePerUnit else { return false }
      guard self.productName == object.productName else { return false }
      guard self.pumpNumber == object.pumpNumber else { return false }
      guard self.type == object.type else { return false }
      guard self.unit == object.unit else { return false }
      return true
    }

    public static func == (lhs: PCPayFuel, rhs: PCPayFuel) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
