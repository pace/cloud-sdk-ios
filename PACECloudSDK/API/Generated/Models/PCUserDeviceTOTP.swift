//
// Generated by SwagGen
// https://github.com/pace/SwagGen
//

import Foundation

public class PCUserDeviceTOTP: APIModel {

    public enum PCUserType: String, Codable, Equatable, CaseIterable {
        case deviceTOTP = "deviceTOTP"
    }

    /** Algorithm to use for HMAC */
    public enum PCUserAlgorithm: String, Codable, Equatable, CaseIterable {
        case sha1 = "SHA1"
        case sha256 = "SHA256"
        case sha512 = "SHA512"
        case md5 = "MD5"
    }

    /** The ID of the device totp */
    public var id: ID?

    public var type: PCUserType?

    /** Algorithm to use for HMAC */
    public var algorithm: PCUserAlgorithm?

    /** Required length of the generated OTP */
    public var digits: Int?

    /** user otp */
    public var otp: String?

    /** user account password */
    public var password: String?

    /** Number of seconds a TOTP hash is valid for. */
    public var period: Int?

    /** user account PIN */
    public var pin: String?

    /** TOTP secret to generate TOTP tokens (encoded base32) */
    public var secret: String?

    public init(id: ID? = nil, type: PCUserType? = nil, algorithm: PCUserAlgorithm? = nil, digits: Int? = nil, otp: String? = nil, password: String? = nil, period: Int? = nil, pin: String? = nil, secret: String? = nil) {
        self.id = id
        self.type = type
        self.algorithm = algorithm
        self.digits = digits
        self.otp = otp
        self.password = password
        self.period = period
        self.pin = pin
        self.secret = secret
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        id = try container.decodeIfPresent("id")
        type = try container.decodeIfPresent("type")
        algorithm = try container.decodeIfPresent("algorithm")
        digits = try container.decodeIfPresent("digits")
        otp = try container.decodeIfPresent("otp")
        password = try container.decodeIfPresent("password")
        period = try container.decodeIfPresent("period")
        pin = try container.decodeIfPresent("pin")
        secret = try container.decodeIfPresent("secret")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(type, forKey: "type")
        try container.encodeIfPresent(algorithm, forKey: "algorithm")
        try container.encodeIfPresent(digits, forKey: "digits")
        try container.encodeIfPresent(otp, forKey: "otp")
        try container.encodeIfPresent(password, forKey: "password")
        try container.encodeIfPresent(period, forKey: "period")
        try container.encodeIfPresent(pin, forKey: "pin")
        try container.encodeIfPresent(secret, forKey: "secret")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? PCUserDeviceTOTP else { return false }
      guard self.id == object.id else { return false }
      guard self.type == object.type else { return false }
      guard self.algorithm == object.algorithm else { return false }
      guard self.digits == object.digits else { return false }
      guard self.otp == object.otp else { return false }
      guard self.password == object.password else { return false }
      guard self.period == object.period else { return false }
      guard self.pin == object.pin else { return false }
      guard self.secret == object.secret else { return false }
      return true
    }

    public static func == (lhs: PCUserDeviceTOTP, rhs: PCUserDeviceTOTP) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
