//
// Generated by SwagGen
// https://github.com/pace/SwagGen
//

import Foundation

public class PCPayTollingMetadata: APIModel {

    /** Date-Time as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z */
    public var entryTime: DateTime?

    /** Unique id of the entry toll point. */
    public var entryTollPointId: String?

    /** Date-Time as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z */
    public var exitTime: DateTime?

    /** Unique id of the exit toll point. */
    public var exitTollPointId: String?

    /** Video toll operator code is the short-hand. (Please refer to the corresponding Tolling Operator documentation for those) */
    public var videoTollOperatorCode: String?

    public init(entryTime: DateTime? = nil, entryTollPointId: String? = nil, exitTime: DateTime? = nil, exitTollPointId: String? = nil, videoTollOperatorCode: String? = nil) {
        self.entryTime = entryTime
        self.entryTollPointId = entryTollPointId
        self.exitTime = exitTime
        self.exitTollPointId = exitTollPointId
        self.videoTollOperatorCode = videoTollOperatorCode
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        entryTime = try container.decodeIfPresent("EntryTime")
        entryTollPointId = try container.decodeIfPresent("EntryTollPointId")
        exitTime = try container.decodeIfPresent("ExitTime")
        exitTollPointId = try container.decodeIfPresent("ExitTollPointId")
        videoTollOperatorCode = try container.decodeIfPresent("VideoTollOperatorCode")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(entryTime, forKey: "EntryTime")
        try container.encodeIfPresent(entryTollPointId, forKey: "EntryTollPointId")
        try container.encodeIfPresent(exitTime, forKey: "ExitTime")
        try container.encodeIfPresent(exitTollPointId, forKey: "ExitTollPointId")
        try container.encodeIfPresent(videoTollOperatorCode, forKey: "VideoTollOperatorCode")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? PCPayTollingMetadata else { return false }
      guard self.entryTime == object.entryTime else { return false }
      guard self.entryTollPointId == object.entryTollPointId else { return false }
      guard self.exitTime == object.exitTime else { return false }
      guard self.exitTollPointId == object.exitTollPointId else { return false }
      guard self.videoTollOperatorCode == object.videoTollOperatorCode else { return false }
      return true
    }

    public static func == (lhs: PCPayTollingMetadata, rhs: PCPayTollingMetadata) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
