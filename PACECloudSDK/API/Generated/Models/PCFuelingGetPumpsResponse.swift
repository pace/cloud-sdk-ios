//
// Generated by SwagGen
// https://github.com/pace/SwagGen
//

import Foundation

public class PCFuelingGetPumpsResponse: APIModel {

    public enum PCFuelingType: String, Codable, Equatable, CaseIterable {
        case getPumps = "getPumps"
    }

    /** request ID */
    public var id: ID?

    public var relationships: Relationships?

    public var type: PCFuelingType?

    public class Relationships: APIModel {

        public var pumps: Pumps?

        public class Pumps: APIModel {

            public var data: [DataType]?

            public class DataType: APIModel {

                public enum PCFuelingType: String, Codable, Equatable, CaseIterable {
                    case pump = "pump"
                }

                /** Pump ID */
                public var id: ID?

                public var type: PCFuelingType?

                public init(id: ID? = nil, type: PCFuelingType? = nil) {
                    self.id = id
                    self.type = type
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    id = try container.decodeIfPresent("id")
                    type = try container.decodeIfPresent("type")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encodeIfPresent(id, forKey: "id")
                    try container.encodeIfPresent(type, forKey: "type")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? DataType else { return false }
                  guard self.id == object.id else { return false }
                  guard self.type == object.type else { return false }
                  return true
                }

                public static func == (lhs: DataType, rhs: DataType) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            public init(data: [DataType]? = nil) {
                self.data = data
            }

            public required init(from decoder: Decoder) throws {
                let container = try decoder.container(keyedBy: StringCodingKey.self)

                data = try container.decodeArrayIfPresent("data")
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.container(keyedBy: StringCodingKey.self)

                try container.encodeIfPresent(data, forKey: "data")
            }

            public func isEqual(to object: Any?) -> Bool {
              guard let object = object as? Pumps else { return false }
              guard self.data == object.data else { return false }
              return true
            }

            public static func == (lhs: Pumps, rhs: Pumps) -> Bool {
                return lhs.isEqual(to: rhs)
            }
        }

        public init(pumps: Pumps? = nil) {
            self.pumps = pumps
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            pumps = try container.decodeIfPresent("pumps")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encodeIfPresent(pumps, forKey: "pumps")
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Relationships else { return false }
          guard self.pumps == object.pumps else { return false }
          return true
        }

        public static func == (lhs: Relationships, rhs: Relationships) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(id: ID? = nil, relationships: Relationships? = nil, type: PCFuelingType? = nil) {
        self.id = id
        self.relationships = relationships
        self.type = type
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        id = try container.decodeIfPresent("id")
        relationships = try container.decodeIfPresent("relationships")
        type = try container.decodeIfPresent("type")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(relationships, forKey: "relationships")
        try container.encodeIfPresent(type, forKey: "type")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? PCFuelingGetPumpsResponse else { return false }
      guard self.id == object.id else { return false }
      guard self.relationships == object.relationships else { return false }
      guard self.type == object.type else { return false }
      return true
    }

    public static func == (lhs: PCFuelingGetPumpsResponse, rhs: PCFuelingGetPumpsResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
