//
// Generated by SwagGen
// https://github.com/pace/SwagGen
//

import Foundation

public class PCWalletTicket: APIModel {

    /** reference to transaction that paid the ticket */
    public var paymentTransactionId: String

    /** reference to session that created the ticket */
    public var sessionId: String

    /** creation date of the ticket ISO 8601 */
    public var createdAt: DateTime

    /** expiry date of the ticket ISO 8601 */
    public var expiresAt: DateTime

    /** detailed description of the ticket */
    public var displayDescription: String

    /** readable name of the ticket */
    public var displayName: String

    /** ticket code for redeeming the ticket */
    public var code: String

    /** ticket type, for now only `washing` is supported */
    public var type: PCWalletTicketType

    /** washing:{integration}:{id} */
    public var prn: String

    /** user that owns the ticket */
    public var userId: String

    /** the unique identifier of the ticket */
    public var id: String

    /** deletion date of the ticket ISO 8601 */
    public var deletedAt: DateTime?

    public init(paymentTransactionId: String, sessionId: String, createdAt: DateTime, expiresAt: DateTime, displayDescription: String, displayName: String, code: String, type: PCWalletTicketType, prn: String, userId: String, id: String, deletedAt: DateTime? = nil) {
        self.paymentTransactionId = paymentTransactionId
        self.sessionId = sessionId
        self.createdAt = createdAt
        self.expiresAt = expiresAt
        self.displayDescription = displayDescription
        self.displayName = displayName
        self.code = code
        self.type = type
        self.prn = prn
        self.userId = userId
        self.id = id
        self.deletedAt = deletedAt
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        paymentTransactionId = try container.decode("paymentTransactionId")
        sessionId = try container.decode("sessionId")
        createdAt = try container.decode("createdAt")
        expiresAt = try container.decode("expiresAt")
        displayDescription = try container.decode("displayDescription")
        displayName = try container.decode("displayName")
        code = try container.decode("code")
        type = try container.decode("type")
        prn = try container.decode("prn")
        userId = try container.decode("userId")
        id = try container.decode("id")
        deletedAt = try container.decodeIfPresent("deletedAt")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(paymentTransactionId, forKey: "paymentTransactionId")
        try container.encode(sessionId, forKey: "sessionId")
        try container.encode(createdAt, forKey: "createdAt")
        try container.encode(expiresAt, forKey: "expiresAt")
        try container.encode(displayDescription, forKey: "displayDescription")
        try container.encode(displayName, forKey: "displayName")
        try container.encode(code, forKey: "code")
        try container.encode(type, forKey: "type")
        try container.encode(prn, forKey: "prn")
        try container.encode(userId, forKey: "userId")
        try container.encode(id, forKey: "id")
        try container.encodeIfPresent(deletedAt, forKey: "deletedAt")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? PCWalletTicket else { return false }
      guard self.paymentTransactionId == object.paymentTransactionId else { return false }
      guard self.sessionId == object.sessionId else { return false }
      guard self.createdAt == object.createdAt else { return false }
      guard self.expiresAt == object.expiresAt else { return false }
      guard self.displayDescription == object.displayDescription else { return false }
      guard self.displayName == object.displayName else { return false }
      guard self.code == object.code else { return false }
      guard self.type == object.type else { return false }
      guard self.prn == object.prn else { return false }
      guard self.userId == object.userId else { return false }
      guard self.id == object.id else { return false }
      guard self.deletedAt == object.deletedAt else { return false }
      return true
    }

    public static func == (lhs: PCWalletTicket, rhs: PCWalletTicket) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
