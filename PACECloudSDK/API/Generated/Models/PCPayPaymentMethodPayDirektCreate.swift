//
// Generated by SwagGen
// https://github.com/pace/SwagGen
//

import Foundation

public class PCPayPaymentMethodPayDirektCreate: APIModel {

    public enum PCPayType: String, Codable, Equatable, CaseIterable {
        case paymentMethod = "paymentMethod"
    }

    public var type: PCPayType

    public var attributes: Attributes?

    /** The ID of this payment method. */
    public var id: ID?

    public class Attributes: APIModel {

        public enum PCPayKind: String, Codable, Equatable, CaseIterable {
            case paydirekt = "paydirekt"
        }

        public var kind: PCPayKind

        /** URL that the user is redirected to after successfully creating the payment method in the backend. */
        public var successURL: String

        /** URL that the user is redirected to after creating the payment method in the backend fails. */
        public var failureURL: String

        /** URL that the user is redirected to after creating the payment method in the backend was canceled by the user. */
        public var canceledURL: String

        public init(kind: PCPayKind, successURL: String, failureURL: String, canceledURL: String) {
            self.kind = kind
            self.successURL = successURL
            self.failureURL = failureURL
            self.canceledURL = canceledURL
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            kind = try container.decode("kind")
            successURL = try container.decode("successURL")
            failureURL = try container.decode("failureURL")
            canceledURL = try container.decode("canceledURL")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encode(kind, forKey: "kind")
            try container.encode(successURL, forKey: "successURL")
            try container.encode(failureURL, forKey: "failureURL")
            try container.encode(canceledURL, forKey: "canceledURL")
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Attributes else { return false }
          guard self.kind == object.kind else { return false }
          guard self.successURL == object.successURL else { return false }
          guard self.failureURL == object.failureURL else { return false }
          guard self.canceledURL == object.canceledURL else { return false }
          return true
        }

        public static func == (lhs: Attributes, rhs: Attributes) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(type: PCPayType, attributes: Attributes? = nil, id: ID? = nil) {
        self.type = type
        self.attributes = attributes
        self.id = id
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        type = try container.decode("type")
        attributes = try container.decodeIfPresent("attributes")
        id = try container.decodeIfPresent("id")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(type, forKey: "type")
        try container.encodeIfPresent(attributes, forKey: "attributes")
        try container.encodeIfPresent(id, forKey: "id")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? PCPayPaymentMethodPayDirektCreate else { return false }
      guard self.type == object.type else { return false }
      guard self.attributes == object.attributes else { return false }
      guard self.id == object.id else { return false }
      return true
    }

    public static func == (lhs: PCPayPaymentMethodPayDirektCreate, rhs: PCPayPaymentMethodPayDirektCreate) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
