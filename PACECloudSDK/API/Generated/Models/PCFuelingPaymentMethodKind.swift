//
// Generated by SwagGen
// https://github.com/pace/SwagGen
//

import Foundation

public class PCFuelingPaymentMethodKind: APIModel {

    public enum PCFuelingId: String, Codable, Equatable, CaseIterable {
        case sepa = "sepa"
        case creditcard = "creditcard"
        case paypal = "paypal"
        case paydirekt = "paydirekt"
        case dkv = "dkv"
        case hoyer = "hoyer"
        case applepay = "applepay"
    }

    public enum PCFuelingType: String, Codable, Equatable, CaseIterable {
        case paymentMethodKind = "paymentMethodKind"
    }

    public var attributes: Attributes?

    public var id: PCFuelingId?

    public var type: PCFuelingType?

    public class Attributes: APIModel {

        /** data privacy information */
        public var dataPrivacy: DataPrivacy?

        /** Indicates whether the payment method can be onboarded/modified. Implict `true` means no. Otherwise yes.
    Most payment method kinds are no implicit, i.e., `implicit=false`.
    This field is optional and if not present should be assumed to indicate `implicit=false`.
     */
        public var implicit: Bool?

        /** localized name */
        public var name: String?

        /** indicates if the payment method kind requires two factors later on */
        public var twoFactor: Bool?

        /** PACE resource name(s) to payment method vendors */
        public var vendorPRNs: [String]?

        /** data privacy information */
        public class DataPrivacy: APIModel {

            /** Localized hint that data privacy terms apply. The hint comes formatted in multiple ways, which are all equally valid if given. Additional formats might be added in the future. */
            public var hint: Hint?

            /** Localized data privacy terms. The terms come formatted in multiple ways, which are all equally valid if given. Additional formats might be added in the future. */
            public var terms: Terms?

            /** Localized hint that data privacy terms apply. The hint comes formatted in multiple ways, which are all equally valid if given. Additional formats might be added in the future. */
            public class Hint: APIModel {

                /** Hint formatted as markdown. Contains only links to the reference <code>terms</code>. Does not contain other links. Other than that, only contains markdown syntax for <a href="https://daringfireball.net/projects/markdown/syntax#p">Paragraphs and Line Breaks</a> and <a href="https://daringfireball.net/projects/markdown/syntax#em">Emphasis</a>. */
                public var markdown: String?

                public init(markdown: String? = nil) {
                    self.markdown = markdown
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    markdown = try container.decodeIfPresent("markdown")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encodeIfPresent(markdown, forKey: "markdown")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Hint else { return false }
                  guard self.markdown == object.markdown else { return false }
                  return true
                }

                public static func == (lhs: Hint, rhs: Hint) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            /** Localized data privacy terms. The terms come formatted in multiple ways, which are all equally valid if given. Additional formats might be added in the future. */
            public class Terms: APIModel {

                /** Terms formatted as markdown. Does not contain external resources like images. */
                public var markdown: String?

                public init(markdown: String? = nil) {
                    self.markdown = markdown
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    markdown = try container.decodeIfPresent("markdown")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encodeIfPresent(markdown, forKey: "markdown")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Terms else { return false }
                  guard self.markdown == object.markdown else { return false }
                  return true
                }

                public static func == (lhs: Terms, rhs: Terms) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            public init(hint: Hint? = nil, terms: Terms? = nil) {
                self.hint = hint
                self.terms = terms
            }

            public required init(from decoder: Decoder) throws {
                let container = try decoder.container(keyedBy: StringCodingKey.self)

                hint = try container.decodeIfPresent("hint")
                terms = try container.decodeIfPresent("terms")
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.container(keyedBy: StringCodingKey.self)

                try container.encodeIfPresent(hint, forKey: "hint")
                try container.encodeIfPresent(terms, forKey: "terms")
            }

            public func isEqual(to object: Any?) -> Bool {
              guard let object = object as? DataPrivacy else { return false }
              guard self.hint == object.hint else { return false }
              guard self.terms == object.terms else { return false }
              return true
            }

            public static func == (lhs: DataPrivacy, rhs: DataPrivacy) -> Bool {
                return lhs.isEqual(to: rhs)
            }
        }

        public init(dataPrivacy: DataPrivacy? = nil, implicit: Bool? = nil, name: String? = nil, twoFactor: Bool? = nil, vendorPRNs: [String]? = nil) {
            self.dataPrivacy = dataPrivacy
            self.implicit = implicit
            self.name = name
            self.twoFactor = twoFactor
            self.vendorPRNs = vendorPRNs
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            dataPrivacy = try container.decodeIfPresent("dataPrivacy")
            implicit = try container.decodeIfPresent("implicit")
            name = try container.decodeIfPresent("name")
            twoFactor = try container.decodeIfPresent("twoFactor")
            vendorPRNs = try container.decodeArrayIfPresent("vendorPRNs")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encodeIfPresent(dataPrivacy, forKey: "dataPrivacy")
            try container.encodeIfPresent(implicit, forKey: "implicit")
            try container.encodeIfPresent(name, forKey: "name")
            try container.encodeIfPresent(twoFactor, forKey: "twoFactor")
            try container.encodeIfPresent(vendorPRNs, forKey: "vendorPRNs")
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Attributes else { return false }
          guard self.dataPrivacy == object.dataPrivacy else { return false }
          guard self.implicit == object.implicit else { return false }
          guard self.name == object.name else { return false }
          guard self.twoFactor == object.twoFactor else { return false }
          guard self.vendorPRNs == object.vendorPRNs else { return false }
          return true
        }

        public static func == (lhs: Attributes, rhs: Attributes) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(attributes: Attributes? = nil, id: PCFuelingId? = nil, type: PCFuelingType? = nil) {
        self.attributes = attributes
        self.id = id
        self.type = type
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        attributes = try container.decodeIfPresent("attributes")
        id = try container.decodeIfPresent("id")
        type = try container.decodeIfPresent("type")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(attributes, forKey: "attributes")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(type, forKey: "type")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? PCFuelingPaymentMethodKind else { return false }
      guard self.attributes == object.attributes else { return false }
      guard self.id == object.id else { return false }
      guard self.type == object.type else { return false }
      return true
    }

    public static func == (lhs: PCFuelingPaymentMethodKind, rhs: PCFuelingPaymentMethodKind) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
