//
// Generated by SwagGen
// https://github.com/pace/SwagGen
//

import Foundation

public class PCPayPaymentMethodSepaCreateRequest: APIModel {

    public enum PCPayType: String, Codable, Equatable, CaseIterable {
        case paymentMethod = "paymentMethod"
    }

    public var type: PCPayType

    public var attributes: Attributes?

    /** The ID of this payment method. */
    public var id: ID?

    public class Attributes: APIModel {

        public enum PCPayKind: String, Codable, Equatable, CaseIterable {
            case sepa = "sepa"
        }

        public var kind: PCPayKind

        /** International Bank Account Number (as defined in ISO 13616:2007), blanks are stripped */
        public var iban: String

        /** Residential address of the company or individual. Mailing may used in cases, where the payment provider has issues
    processing the payment.
     */
        public var address: Address

        /** Legal name of the company in (case of a company account, firstName and lastName are ignored in that case) */
        public var company: String?

        /** Email address */
        public var email: String?

        /** Legal name of account owner (in case of an individual person) */
        public var firstName: String?

        /** Legal first name of account owner (in case of an individual person) */
        public var lastName: String?

        /** Legal title of account owner. */
        public var title: String?

        /** Residential address of the company or individual. Mailing may used in cases, where the payment provider has issues
        processing the payment.
         */
        public class Address: APIModel {

            public var street: String

            public var houseNo: String

            public var postalCode: String

            public var city: String

            /** Country code in as specified in ISO 3166-1. */
            public var countryCode: String

            public init(street: String, houseNo: String, postalCode: String, city: String, countryCode: String) {
                self.street = street
                self.houseNo = houseNo
                self.postalCode = postalCode
                self.city = city
                self.countryCode = countryCode
            }

            public required init(from decoder: Decoder) throws {
                let container = try decoder.container(keyedBy: StringCodingKey.self)

                street = try container.decode("street")
                houseNo = try container.decode("houseNo")
                postalCode = try container.decode("postalCode")
                city = try container.decode("city")
                countryCode = try container.decode("countryCode")
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.container(keyedBy: StringCodingKey.self)

                try container.encode(street, forKey: "street")
                try container.encode(houseNo, forKey: "houseNo")
                try container.encode(postalCode, forKey: "postalCode")
                try container.encode(city, forKey: "city")
                try container.encode(countryCode, forKey: "countryCode")
            }

            public func isEqual(to object: Any?) -> Bool {
              guard let object = object as? Address else { return false }
              guard self.street == object.street else { return false }
              guard self.houseNo == object.houseNo else { return false }
              guard self.postalCode == object.postalCode else { return false }
              guard self.city == object.city else { return false }
              guard self.countryCode == object.countryCode else { return false }
              return true
            }

            public static func == (lhs: Address, rhs: Address) -> Bool {
                return lhs.isEqual(to: rhs)
            }
        }

        public init(kind: PCPayKind, iban: String, address: Address, company: String? = nil, email: String? = nil, firstName: String? = nil, lastName: String? = nil, title: String? = nil) {
            self.kind = kind
            self.iban = iban
            self.address = address
            self.company = company
            self.email = email
            self.firstName = firstName
            self.lastName = lastName
            self.title = title
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            kind = try container.decode("kind")
            iban = try container.decode("iban")
            address = try container.decode("address")
            company = try container.decodeIfPresent("company")
            email = try container.decodeIfPresent("email")
            firstName = try container.decodeIfPresent("firstName")
            lastName = try container.decodeIfPresent("lastName")
            title = try container.decodeIfPresent("title")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encode(kind, forKey: "kind")
            try container.encode(iban, forKey: "iban")
            try container.encode(address, forKey: "address")
            try container.encodeIfPresent(company, forKey: "company")
            try container.encodeIfPresent(email, forKey: "email")
            try container.encodeIfPresent(firstName, forKey: "firstName")
            try container.encodeIfPresent(lastName, forKey: "lastName")
            try container.encodeIfPresent(title, forKey: "title")
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Attributes else { return false }
          guard self.kind == object.kind else { return false }
          guard self.iban == object.iban else { return false }
          guard self.address == object.address else { return false }
          guard self.company == object.company else { return false }
          guard self.email == object.email else { return false }
          guard self.firstName == object.firstName else { return false }
          guard self.lastName == object.lastName else { return false }
          guard self.title == object.title else { return false }
          return true
        }

        public static func == (lhs: Attributes, rhs: Attributes) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(type: PCPayType, attributes: Attributes? = nil, id: ID? = nil) {
        self.type = type
        self.attributes = attributes
        self.id = id
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        type = try container.decode("type")
        attributes = try container.decodeIfPresent("attributes")
        id = try container.decodeIfPresent("id")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(type, forKey: "type")
        try container.encodeIfPresent(attributes, forKey: "attributes")
        try container.encodeIfPresent(id, forKey: "id")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? PCPayPaymentMethodSepaCreateRequest else { return false }
      guard self.type == object.type else { return false }
      guard self.attributes == object.attributes else { return false }
      guard self.id == object.id else { return false }
      return true
    }

    public static func == (lhs: PCPayPaymentMethodSepaCreateRequest, rhs: PCPayPaymentMethodSepaCreateRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
