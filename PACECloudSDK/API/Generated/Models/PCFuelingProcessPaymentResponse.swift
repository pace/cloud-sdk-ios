//
// Generated by SwagGen
// https://github.com/pace/SwagGen
//

import Foundation

public class PCFuelingProcessPaymentResponse: APIModel {

    public enum PCFuelingType: String, Codable, Equatable, CaseIterable {
        case transaction = "transaction"
    }

    public var attributes: Attributes?

    /** Transaction ID */
    public var id: ID?

    public var type: PCFuelingType?

    public class Attributes: APIModel {

        public enum PCFuelingCurrency: String, Codable, Equatable, CaseIterable {
            case eur = "EUR"
        }

        public var vat: VAT?

        public var currency: PCFuelingCurrency?

        public var gasStationId: ID?

        /** Mileage in meters */
        public var mileage: Int?

        public var paymentToken: String?

        public var priceIncludingVAT: Double?

        public var priceWithoutVAT: Double?

        public var pumpId: ID?

        /** Vehicle identification number */
        public var vin: String?

        public class VAT: APIModel {

            public var amount: Double?

            public var rate: Double?

            public init(amount: Double? = nil, rate: Double? = nil) {
                self.amount = amount
                self.rate = rate
            }

            public required init(from decoder: Decoder) throws {
                let container = try decoder.container(keyedBy: StringCodingKey.self)

                amount = try container.decodeIfPresent("amount")
                rate = try container.decodeIfPresent("rate")
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.container(keyedBy: StringCodingKey.self)

                try container.encodeIfPresent(amount, forKey: "amount")
                try container.encodeIfPresent(rate, forKey: "rate")
            }

            public func isEqual(to object: Any?) -> Bool {
              guard let object = object as? VAT else { return false }
              guard self.amount == object.amount else { return false }
              guard self.rate == object.rate else { return false }
              return true
            }

            public static func == (lhs: VAT, rhs: VAT) -> Bool {
                return lhs.isEqual(to: rhs)
            }
        }

        public init(vat: VAT? = nil, currency: PCFuelingCurrency? = nil, gasStationId: ID? = nil, mileage: Int? = nil, paymentToken: String? = nil, priceIncludingVAT: Double? = nil, priceWithoutVAT: Double? = nil, pumpId: ID? = nil, vin: String? = nil) {
            self.vat = vat
            self.currency = currency
            self.gasStationId = gasStationId
            self.mileage = mileage
            self.paymentToken = paymentToken
            self.priceIncludingVAT = priceIncludingVAT
            self.priceWithoutVAT = priceWithoutVAT
            self.pumpId = pumpId
            self.vin = vin
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            vat = try container.decodeIfPresent("VAT")
            currency = try container.decodeIfPresent("currency")
            gasStationId = try container.decodeIfPresent("gasStationId")
            mileage = try container.decodeIfPresent("mileage")
            paymentToken = try container.decodeIfPresent("paymentToken")
            priceIncludingVAT = try container.decodeIfPresent("priceIncludingVAT")
            priceWithoutVAT = try container.decodeIfPresent("priceWithoutVAT")
            pumpId = try container.decodeIfPresent("pumpId")
            vin = try container.decodeIfPresent("vin")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encodeIfPresent(vat, forKey: "VAT")
            try container.encodeIfPresent(currency, forKey: "currency")
            try container.encodeIfPresent(gasStationId, forKey: "gasStationId")
            try container.encodeIfPresent(mileage, forKey: "mileage")
            try container.encodeIfPresent(paymentToken, forKey: "paymentToken")
            try container.encodeIfPresent(priceIncludingVAT, forKey: "priceIncludingVAT")
            try container.encodeIfPresent(priceWithoutVAT, forKey: "priceWithoutVAT")
            try container.encodeIfPresent(pumpId, forKey: "pumpId")
            try container.encodeIfPresent(vin, forKey: "vin")
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Attributes else { return false }
          guard self.vat == object.vat else { return false }
          guard self.currency == object.currency else { return false }
          guard self.gasStationId == object.gasStationId else { return false }
          guard self.mileage == object.mileage else { return false }
          guard self.paymentToken == object.paymentToken else { return false }
          guard self.priceIncludingVAT == object.priceIncludingVAT else { return false }
          guard self.priceWithoutVAT == object.priceWithoutVAT else { return false }
          guard self.pumpId == object.pumpId else { return false }
          guard self.vin == object.vin else { return false }
          return true
        }

        public static func == (lhs: Attributes, rhs: Attributes) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(attributes: Attributes? = nil, id: ID? = nil, type: PCFuelingType? = nil) {
        self.attributes = attributes
        self.id = id
        self.type = type
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        attributes = try container.decodeIfPresent("attributes")
        id = try container.decodeIfPresent("id")
        type = try container.decodeIfPresent("type")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(attributes, forKey: "attributes")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(type, forKey: "type")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? PCFuelingProcessPaymentResponse else { return false }
      guard self.attributes == object.attributes else { return false }
      guard self.id == object.id else { return false }
      guard self.type == object.type else { return false }
      return true
    }

    public static func == (lhs: PCFuelingProcessPaymentResponse, rhs: PCFuelingProcessPaymentResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
