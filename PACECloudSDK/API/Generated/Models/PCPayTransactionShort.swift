//
// Generated by SwagGen
// https://github.com/pace/SwagGen
//

import Foundation

public class PCPayTransactionShort: APIModel {

    public enum PCPayType: String, Codable, Equatable, CaseIterable {
        case transaction = "transaction"
    }

    /** ID of the new transaction. */
    public var id: ID?

    public var type: PCPayType?

    public var vat: VAT?

    /** Initial creation date of the transaction (https://tools.ietf.org/html/rfc3339#section-5.6).
 */
    public var createdAt: DateTime?

    /** Initial creation date of the transaction (local-time of the gas station/point of interest) (https://tools.ietf.org/html/rfc3339#section-5.6).
 */
    public var createdAtLocaltime: String?

    /** Currency as specified in ISO-4217. */
    public var currency: String?

    public var fuel: PCPayFuel?

    public var location: PCPayReadOnlyLocation?

    /** Total price at pump including VAT */
    public var priceIncludingVAT: Decimal?

    /** Total price at pump excluding VAT */
    public var priceWithoutVAT: Decimal?

    public class VAT: APIModel {

        public var amount: Decimal?

        public var rate: Decimal?

        public init(amount: Decimal? = nil, rate: Decimal? = nil) {
            self.amount = amount
            self.rate = rate
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            amount = try container.decodeLosslessDecimal("amount")
            rate = try container.decodeLosslessDecimal("rate")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encodeIfPresent(amount, forKey: "amount")
            try container.encodeIfPresent(rate, forKey: "rate")
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? VAT else { return false }
          guard self.amount == object.amount else { return false }
          guard self.rate == object.rate else { return false }
          return true
        }

        public static func == (lhs: VAT, rhs: VAT) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(id: ID? = nil, type: PCPayType? = nil, vat: VAT? = nil, createdAt: DateTime? = nil, createdAtLocaltime: String? = nil, currency: String? = nil, fuel: PCPayFuel? = nil, location: PCPayReadOnlyLocation? = nil, priceIncludingVAT: Decimal? = nil, priceWithoutVAT: Decimal? = nil) {
        self.id = id
        self.type = type
        self.vat = vat
        self.createdAt = createdAt
        self.createdAtLocaltime = createdAtLocaltime
        self.currency = currency
        self.fuel = fuel
        self.location = location
        self.priceIncludingVAT = priceIncludingVAT
        self.priceWithoutVAT = priceWithoutVAT
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        id = try container.decodeIfPresent("id")
        type = try container.decodeIfPresent("type")
        vat = try container.decodeIfPresent("VAT")
        createdAt = try container.decodeIfPresent("createdAt")
        createdAtLocaltime = try container.decodeIfPresent("createdAtLocaltime")
        currency = try container.decodeIfPresent("currency")
        fuel = try container.decodeIfPresent("fuel")
        location = try container.decodeIfPresent("location")
        priceIncludingVAT = try container.decodeLosslessDecimal("priceIncludingVAT")
        priceWithoutVAT = try container.decodeLosslessDecimal("priceWithoutVAT")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(type, forKey: "type")
        try container.encodeIfPresent(vat, forKey: "VAT")
        try container.encodeIfPresent(createdAt, forKey: "createdAt")
        try container.encodeIfPresent(createdAtLocaltime, forKey: "createdAtLocaltime")
        try container.encodeIfPresent(currency, forKey: "currency")
        try container.encodeIfPresent(fuel, forKey: "fuel")
        try container.encodeIfPresent(location, forKey: "location")
        try container.encodeIfPresent(priceIncludingVAT, forKey: "priceIncludingVAT")
        try container.encodeIfPresent(priceWithoutVAT, forKey: "priceWithoutVAT")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? PCPayTransactionShort else { return false }
      guard self.id == object.id else { return false }
      guard self.type == object.type else { return false }
      guard self.vat == object.vat else { return false }
      guard self.createdAt == object.createdAt else { return false }
      guard self.createdAtLocaltime == object.createdAtLocaltime else { return false }
      guard self.currency == object.currency else { return false }
      guard self.fuel == object.fuel else { return false }
      guard self.location == object.location else { return false }
      guard self.priceIncludingVAT == object.priceIncludingVAT else { return false }
      guard self.priceWithoutVAT == object.priceWithoutVAT else { return false }
      return true
    }

    public static func == (lhs: PCPayTransactionShort, rhs: PCPayTransactionShort) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
