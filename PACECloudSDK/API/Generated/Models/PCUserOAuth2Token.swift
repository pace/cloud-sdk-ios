//
// Generated by SwagGen
// https://github.com/pace/SwagGen
//

import Foundation

public class PCUserOAuth2Token: APIModel {

    /** The type of the token issued as described. */
    public enum PCUserIssuedTokenType: String, Codable, Equatable, CaseIterable {
        case urnietfparamsoauthtokenTypejwt = "urn:ietf:params:oauth:token-type:jwt"
    }

    public var accessToken: String

    /** The type of the token issued as described. */
    public var issuedTokenType: PCUserIssuedTokenType

    /** The type of the token issued as described in
https://datatracker.ietf.org/doc/html/rfc6749#section-7.1.  Value is case insensitive.
 */
    public var tokenType: String

    /** The lifetime in seconds of the access token.  For
example, the value "3600" denotes that the access token will
expire in one hour from the time the response was generated.
If omitted, the authorization server SHOULD provide the
expiration time via other means or document the default value.
 */
    public var expiresIn: Double

    public init(accessToken: String, issuedTokenType: PCUserIssuedTokenType, tokenType: String, expiresIn: Double) {
        self.accessToken = accessToken
        self.issuedTokenType = issuedTokenType
        self.tokenType = tokenType
        self.expiresIn = expiresIn
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        accessToken = try container.decode("access_token")
        issuedTokenType = try container.decode("issued_token_type")
        tokenType = try container.decode("token_type")
        expiresIn = try container.decode("expires_in")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(accessToken, forKey: "access_token")
        try container.encode(issuedTokenType, forKey: "issued_token_type")
        try container.encode(tokenType, forKey: "token_type")
        try container.encode(expiresIn, forKey: "expires_in")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? PCUserOAuth2Token else { return false }
      guard self.accessToken == object.accessToken else { return false }
      guard self.issuedTokenType == object.issuedTokenType else { return false }
      guard self.tokenType == object.tokenType else { return false }
      guard self.expiresIn == object.expiresIn else { return false }
      return true
    }

    public static func == (lhs: PCUserOAuth2Token, rhs: PCUserOAuth2Token) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
