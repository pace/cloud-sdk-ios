//
// Generated by SwagGen
// https://github.com/pace/SwagGen
//

import Foundation

/** Use this error if an incoming http request is not authorized
to access a given resource. */
public class PCWalletUnauthorizedError: APIModel {

    public var name: String

    public var message: String

    public var id: String

    public var status: String

    public var code: String

    public var title: String

    public var detail: String?

    public var source: PCWalletErrorSource?

    public var stack: String?

    public init(name: String, message: String, id: String, status: String, code: String, title: String, detail: String? = nil, source: PCWalletErrorSource? = nil, stack: String? = nil) {
        self.name = name
        self.message = message
        self.id = id
        self.status = status
        self.code = code
        self.title = title
        self.detail = detail
        self.source = source
        self.stack = stack
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        name = try container.decode("name")
        message = try container.decode("message")
        id = try container.decode("id")
        status = try container.decode("status")
        code = try container.decode("code")
        title = try container.decode("title")
        detail = try container.decodeIfPresent("detail")
        source = try container.decodeIfPresent("source")
        stack = try container.decodeIfPresent("stack")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(name, forKey: "name")
        try container.encode(message, forKey: "message")
        try container.encode(id, forKey: "id")
        try container.encode(status, forKey: "status")
        try container.encode(code, forKey: "code")
        try container.encode(title, forKey: "title")
        try container.encodeIfPresent(detail, forKey: "detail")
        try container.encodeIfPresent(source, forKey: "source")
        try container.encodeIfPresent(stack, forKey: "stack")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? PCWalletUnauthorizedError else { return false }
      guard self.name == object.name else { return false }
      guard self.message == object.message else { return false }
      guard self.id == object.id else { return false }
      guard self.status == object.status else { return false }
      guard self.code == object.code else { return false }
      guard self.title == object.title else { return false }
      guard self.detail == object.detail else { return false }
      guard self.source == object.source else { return false }
      guard self.stack == object.stack else { return false }
      return true
    }

    public static func == (lhs: PCWalletUnauthorizedError, rhs: PCWalletUnauthorizedError) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
