//
// Generated by SwagGen
// https://github.com/pace/SwagGen
//

import Foundation

public class PCFuelingApproachingResponse: APIModel {

    public enum PCFuelingType: String, Codable, Equatable, CaseIterable {
        case approaching = "approaching"
    }

    /** Approaching ID */
    public var id: ID?

    public var type: PCFuelingType?

    public var gasStation: PCFuelingGasStation?

    public var gasStationNote: PCFuelingGasStationNote?

    public var paymentMethods: [PCFuelingPaymentMethod]?

    public var supportedPaymentMethodKinds: [PCFuelingPaymentMethodKind]?

    public var transactions: [PCFuelingTransaction]?

    public var unsupportedPaymentMethodKinds: [PCFuelingPaymentMethodKind]?

    public var unsupportedPaymentMethods: [PCFuelingPaymentMethod]?

    public init(id: ID? = nil, type: PCFuelingType? = nil, gasStation: PCFuelingGasStation? = nil, gasStationNote: PCFuelingGasStationNote? = nil, paymentMethods: [PCFuelingPaymentMethod]? = nil, supportedPaymentMethodKinds: [PCFuelingPaymentMethodKind]? = nil, transactions: [PCFuelingTransaction]? = nil, unsupportedPaymentMethodKinds: [PCFuelingPaymentMethodKind]? = nil, unsupportedPaymentMethods: [PCFuelingPaymentMethod]? = nil) {
        self.id = id
        self.type = type
        self.gasStation = gasStation
        self.gasStationNote = gasStationNote
        self.paymentMethods = paymentMethods
        self.supportedPaymentMethodKinds = supportedPaymentMethodKinds
        self.transactions = transactions
        self.unsupportedPaymentMethodKinds = unsupportedPaymentMethodKinds
        self.unsupportedPaymentMethods = unsupportedPaymentMethods
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        id = try container.decodeIfPresent("id")
        type = try container.decodeIfPresent("type")
        gasStation = try container.decodeIfPresent("gasStation")
        gasStationNote = try container.decodeIfPresent("gasStationNote")
        paymentMethods = try container.decodeIfPresent("paymentMethods")
        supportedPaymentMethodKinds = try container.decodeIfPresent("supportedPaymentMethodKinds")
        transactions = try container.decodeIfPresent("transactions")
        unsupportedPaymentMethodKinds = try container.decodeIfPresent("unsupportedPaymentMethodKinds")
        unsupportedPaymentMethods = try container.decodeIfPresent("unsupportedPaymentMethods")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(type, forKey: "type")
        try container.encodeIfPresent(gasStation, forKey: "gasStation")
        try container.encodeIfPresent(gasStationNote, forKey: "gasStationNote")
        try container.encodeIfPresent(paymentMethods, forKey: "paymentMethods")
        try container.encodeIfPresent(supportedPaymentMethodKinds, forKey: "supportedPaymentMethodKinds")
        try container.encodeIfPresent(transactions, forKey: "transactions")
        try container.encodeIfPresent(unsupportedPaymentMethodKinds, forKey: "unsupportedPaymentMethodKinds")
        try container.encodeIfPresent(unsupportedPaymentMethods, forKey: "unsupportedPaymentMethods")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? PCFuelingApproachingResponse else { return false }
      guard self.id == object.id else { return false }
      guard self.type == object.type else { return false }
      guard self.gasStation == object.gasStation else { return false }
      guard self.gasStationNote == object.gasStationNote else { return false }
      guard self.paymentMethods == object.paymentMethods else { return false }
      guard self.supportedPaymentMethodKinds == object.supportedPaymentMethodKinds else { return false }
      guard self.transactions == object.transactions else { return false }
      guard self.unsupportedPaymentMethodKinds == object.unsupportedPaymentMethodKinds else { return false }
      guard self.unsupportedPaymentMethods == object.unsupportedPaymentMethods else { return false }
      return true
    }

    public static func == (lhs: PCFuelingApproachingResponse, rhs: PCFuelingApproachingResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
