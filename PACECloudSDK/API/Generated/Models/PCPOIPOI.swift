//
// Generated by SwagGen
// https://github.com/pace/SwagGen
//

import Foundation

public class PCPOIPOI: APIModel {

    /** POI ID */
    public var id: ID?

    public var type: PCPOIPOIType?

    public var referenceStatuses: [PCPOIReferenceStatus]?

    public var sucessorOf: [PCPOIGasStation]?

    public var active: Bool?

    public var boundary: PCPOICommonGeoJSONPolygon?

    public var countryId: PCPOICommonCountryId?

    public var createdAt: DateTime?

    /** a JSON field containing POI specific data */
    public var data: [PCPOIFieldData]?

    public var lastSeenAt: DateTime?

    /** a JSON field containing information about data field origin and update time */
    public var metadata: [PCPOIFieldMetaData]?

    public var position: PCPOICommonGeoJSONPoint?

    /** References are PRNs to external and internal resources that are represented by this poi */
    public var references: [String]?

    public var updatedAt: DateTime?

    public init(id: ID? = nil, type: PCPOIPOIType? = nil, referenceStatuses: [PCPOIReferenceStatus]? = nil, sucessorOf: [PCPOIGasStation]? = nil, active: Bool? = nil, boundary: PCPOICommonGeoJSONPolygon? = nil, countryId: PCPOICommonCountryId? = nil, createdAt: DateTime? = nil, data: [PCPOIFieldData]? = nil, lastSeenAt: DateTime? = nil, metadata: [PCPOIFieldMetaData]? = nil, position: PCPOICommonGeoJSONPoint? = nil, references: [String]? = nil, updatedAt: DateTime? = nil) {
        self.id = id
        self.type = type
        self.referenceStatuses = referenceStatuses
        self.sucessorOf = sucessorOf
        self.active = active
        self.boundary = boundary
        self.countryId = countryId
        self.createdAt = createdAt
        self.data = data
        self.lastSeenAt = lastSeenAt
        self.metadata = metadata
        self.position = position
        self.references = references
        self.updatedAt = updatedAt
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        id = try container.decodeIfPresent("id")
        type = try container.decodeIfPresent("type")
        referenceStatuses = try container.decodeIfPresent("referenceStatuses")
        sucessorOf = try container.decodeIfPresent("sucessorOf")
        active = try container.decodeIfPresent("active")
        boundary = try container.decodeIfPresent("boundary")
        countryId = try container.decodeIfPresent("countryId")
        createdAt = try container.decodeIfPresent("createdAt")
        data = try container.decodeArrayIfPresent("data")
        lastSeenAt = try container.decodeIfPresent("lastSeenAt")
        metadata = try container.decodeArrayIfPresent("metadata")
        position = try container.decodeIfPresent("position")
        references = try container.decodeArrayIfPresent("references")
        updatedAt = try container.decodeIfPresent("updatedAt")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(type, forKey: "type")
        try container.encodeIfPresent(referenceStatuses, forKey: "referenceStatuses")
        try container.encodeIfPresent(sucessorOf, forKey: "sucessorOf")
        try container.encodeIfPresent(active, forKey: "active")
        try container.encodeIfPresent(boundary, forKey: "boundary")
        try container.encodeIfPresent(countryId, forKey: "countryId")
        try container.encodeIfPresent(createdAt, forKey: "createdAt")
        try container.encodeIfPresent(data, forKey: "data")
        try container.encodeIfPresent(lastSeenAt, forKey: "lastSeenAt")
        try container.encodeIfPresent(metadata, forKey: "metadata")
        try container.encodeIfPresent(position, forKey: "position")
        try container.encodeIfPresent(references, forKey: "references")
        try container.encodeIfPresent(updatedAt, forKey: "updatedAt")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? PCPOIPOI else { return false }
      guard self.id == object.id else { return false }
      guard self.type == object.type else { return false }
      guard self.referenceStatuses == object.referenceStatuses else { return false }
      guard self.sucessorOf == object.sucessorOf else { return false }
      guard self.active == object.active else { return false }
      guard self.boundary == object.boundary else { return false }
      guard self.countryId == object.countryId else { return false }
      guard self.createdAt == object.createdAt else { return false }
      guard self.data == object.data else { return false }
      guard self.lastSeenAt == object.lastSeenAt else { return false }
      guard self.metadata == object.metadata else { return false }
      guard self.position == object.position else { return false }
      guard self.references == object.references else { return false }
      guard self.updatedAt == object.updatedAt else { return false }
      return true
    }

    public static func == (lhs: PCPOIPOI, rhs: PCPOIPOI) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
