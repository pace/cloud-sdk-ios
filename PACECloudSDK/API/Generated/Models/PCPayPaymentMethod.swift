//
// Generated by SwagGen
// https://github.com/pace/SwagGen
//

import Foundation

public class PCPayPaymentMethod: APIModel {

    public enum PCPayType: String, Codable, Equatable, CaseIterable {
        case paymentMethod = "paymentMethod"
    }

    public var attributes: Attributes?

    /** Payment method ID */
    public var id: ID?

    public var links: Links?

    public var meta: Meta?

    public var relationships: Relationships?

    public var type: PCPayType?

    public class Attributes: APIModel {

        public enum PCPayKind: String, Codable, Equatable, CaseIterable {
            case sepa = "sepa"
            case creditcard = "creditcard"
            case paypal = "paypal"
            case paydirekt = "paydirekt"
            case dkv = "dkv"
            case hoyer = "hoyer"
            case applepay = "applepay"
        }

        /** Customer chosen alias for the payment method */
        public var alias: String?

        /** URL for the user to call in order to approve this payment method. */
        public var approvalURL: String?

        public var identificationString: String?

        /** Implicit (`true`) payment methods are read-only and cannot be deleted, e.g., ApplePay */
        public var implicit: Bool?

        public var kind: PCPayKind?

        /** indicates if the payment method kind requires two factors later on */
        public var twoFactor: Bool?

        /** PACE resource name(s) to payment method vendor */
        public var vendorPRN: String?

        public init(alias: String? = nil, approvalURL: String? = nil, identificationString: String? = nil, implicit: Bool? = nil, kind: PCPayKind? = nil, twoFactor: Bool? = nil, vendorPRN: String? = nil) {
            self.alias = alias
            self.approvalURL = approvalURL
            self.identificationString = identificationString
            self.implicit = implicit
            self.kind = kind
            self.twoFactor = twoFactor
            self.vendorPRN = vendorPRN
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            alias = try container.decodeIfPresent("alias")
            approvalURL = try container.decodeIfPresent("approvalURL")
            identificationString = try container.decodeIfPresent("identificationString")
            implicit = try container.decodeIfPresent("implicit")
            kind = try container.decodeIfPresent("kind")
            twoFactor = try container.decodeIfPresent("twoFactor")
            vendorPRN = try container.decodeIfPresent("vendorPRN")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encodeIfPresent(alias, forKey: "alias")
            try container.encodeIfPresent(approvalURL, forKey: "approvalURL")
            try container.encodeIfPresent(identificationString, forKey: "identificationString")
            try container.encodeIfPresent(implicit, forKey: "implicit")
            try container.encodeIfPresent(kind, forKey: "kind")
            try container.encodeIfPresent(twoFactor, forKey: "twoFactor")
            try container.encodeIfPresent(vendorPRN, forKey: "vendorPRN")
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Attributes else { return false }
          guard self.alias == object.alias else { return false }
          guard self.approvalURL == object.approvalURL else { return false }
          guard self.identificationString == object.identificationString else { return false }
          guard self.implicit == object.implicit else { return false }
          guard self.kind == object.kind else { return false }
          guard self.twoFactor == object.twoFactor else { return false }
          guard self.vendorPRN == object.vendorPRN else { return false }
          return true
        }

        public static func == (lhs: Attributes, rhs: Attributes) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public class Links: APIModel {

        public var authorize: Authorize?

        public class Authorize: APIModel {

            public var href: String?

            public var meta: Meta?

            public class Meta: APIModel {

                public enum PCPayAuthFlow: String, Codable, Equatable, CaseIterable {
                    case tokenProvided = "token-provided"
                    case methodOnboarded = "method-onboarded"
                }

                public var authFlow: PCPayAuthFlow?

                public init(authFlow: PCPayAuthFlow? = nil) {
                    self.authFlow = authFlow
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    authFlow = try container.decodeIfPresent("authFlow")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encodeIfPresent(authFlow, forKey: "authFlow")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Meta else { return false }
                  guard self.authFlow == object.authFlow else { return false }
                  return true
                }

                public static func == (lhs: Meta, rhs: Meta) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            public init(href: String? = nil, meta: Meta? = nil) {
                self.href = href
                self.meta = meta
            }

            public required init(from decoder: Decoder) throws {
                let container = try decoder.container(keyedBy: StringCodingKey.self)

                href = try container.decodeIfPresent("href")
                meta = try container.decodeIfPresent("meta")
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.container(keyedBy: StringCodingKey.self)

                try container.encodeIfPresent(href, forKey: "href")
                try container.encodeIfPresent(meta, forKey: "meta")
            }

            public func isEqual(to object: Any?) -> Bool {
              guard let object = object as? Authorize else { return false }
              guard self.href == object.href else { return false }
              guard self.meta == object.meta else { return false }
              return true
            }

            public static func == (lhs: Authorize, rhs: Authorize) -> Bool {
                return lhs.isEqual(to: rhs)
            }
        }

        public init(authorize: Authorize? = nil) {
            self.authorize = authorize
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            authorize = try container.decodeIfPresent("authorize")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encodeIfPresent(authorize, forKey: "authorize")
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Links else { return false }
          guard self.authorize == object.authorize else { return false }
          return true
        }

        public static func == (lhs: Links, rhs: Links) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public class Meta: APIModel {

        /** Merchant name if the request was made in a way that a merchant name can be determined. For example if requesting payment methods for a specific gas station, it is the merchant name at that gas station. */
        public var merchantName: String?

        public init(merchantName: String? = nil) {
            self.merchantName = merchantName
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            merchantName = try container.decodeIfPresent("merchantName")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encodeIfPresent(merchantName, forKey: "merchantName")
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Meta else { return false }
          guard self.merchantName == object.merchantName else { return false }
          return true
        }

        public static func == (lhs: Meta, rhs: Meta) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public class Relationships: APIModel {

        public var paymentTokens: PaymentTokens?

        public class PaymentTokens: APIModel {

            public var data: [PCPayPaymentTokensRelationship]?

            public init(data: [PCPayPaymentTokensRelationship]? = nil) {
                self.data = data
            }

            public required init(from decoder: Decoder) throws {
                let container = try decoder.container(keyedBy: StringCodingKey.self)

                data = try container.decodeArrayIfPresent("data")
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.container(keyedBy: StringCodingKey.self)

                try container.encodeIfPresent(data, forKey: "data")
            }

            public func isEqual(to object: Any?) -> Bool {
              guard let object = object as? PaymentTokens else { return false }
              guard self.data == object.data else { return false }
              return true
            }

            public static func == (lhs: PaymentTokens, rhs: PaymentTokens) -> Bool {
                return lhs.isEqual(to: rhs)
            }
        }

        public init(paymentTokens: PaymentTokens? = nil) {
            self.paymentTokens = paymentTokens
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            paymentTokens = try container.decodeIfPresent("paymentTokens")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encodeIfPresent(paymentTokens, forKey: "paymentTokens")
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Relationships else { return false }
          guard self.paymentTokens == object.paymentTokens else { return false }
          return true
        }

        public static func == (lhs: Relationships, rhs: Relationships) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(attributes: Attributes? = nil, id: ID? = nil, links: Links? = nil, meta: Meta? = nil, relationships: Relationships? = nil, type: PCPayType? = nil) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.meta = meta
        self.relationships = relationships
        self.type = type
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        attributes = try container.decodeIfPresent("attributes")
        id = try container.decodeIfPresent("id")
        links = try container.decodeIfPresent("links")
        meta = try container.decodeIfPresent("meta")
        relationships = try container.decodeIfPresent("relationships")
        type = try container.decodeIfPresent("type")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(attributes, forKey: "attributes")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(links, forKey: "links")
        try container.encodeIfPresent(meta, forKey: "meta")
        try container.encodeIfPresent(relationships, forKey: "relationships")
        try container.encodeIfPresent(type, forKey: "type")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? PCPayPaymentMethod else { return false }
      guard self.attributes == object.attributes else { return false }
      guard self.id == object.id else { return false }
      guard self.links == object.links else { return false }
      guard self.meta == object.meta else { return false }
      guard self.relationships == object.relationships else { return false }
      guard self.type == object.type else { return false }
      return true
    }

    public static func == (lhs: PCPayPaymentMethod, rhs: PCPayPaymentMethod) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
