//
// Generated by SwagGen
// https://github.com/pace/SwagGen
//

import Foundation

public class PCUserAuditLogRecord: APIModel {

    public var actionData: [String: Any]?

    /** Date the action happened */
    public var actionDate: DateTime?

    public var actionName: String?

    public var resource: Resource?

    /** Name of the service this action was performed on, e.g., pay or fueling */
    public var service: String?

    public class Resource: APIModel {

        /** Identifier of the resource */
        public var identifier: String?

        public var resourceType: String?

        public init(identifier: String? = nil, resourceType: String? = nil) {
            self.identifier = identifier
            self.resourceType = resourceType
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            identifier = try container.decodeIfPresent("identifier")
            resourceType = try container.decodeIfPresent("resourceType")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encodeIfPresent(identifier, forKey: "identifier")
            try container.encodeIfPresent(resourceType, forKey: "resourceType")
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Resource else { return false }
          guard self.identifier == object.identifier else { return false }
          guard self.resourceType == object.resourceType else { return false }
          return true
        }

        public static func == (lhs: Resource, rhs: Resource) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(actionData: [String: Any]? = nil, actionDate: DateTime? = nil, actionName: String? = nil, resource: Resource? = nil, service: String? = nil) {
        self.actionData = actionData
        self.actionDate = actionDate
        self.actionName = actionName
        self.resource = resource
        self.service = service
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        actionData = try container.decodeAnyIfPresent("actionData")
        actionDate = try container.decodeIfPresent("actionDate")
        actionName = try container.decodeIfPresent("actionName")
        resource = try container.decodeIfPresent("resource")
        service = try container.decodeIfPresent("service")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeAnyIfPresent(actionData, forKey: "actionData")
        try container.encodeIfPresent(actionDate, forKey: "actionDate")
        try container.encodeIfPresent(actionName, forKey: "actionName")
        try container.encodeIfPresent(resource, forKey: "resource")
        try container.encodeIfPresent(service, forKey: "service")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? PCUserAuditLogRecord else { return false }
      guard NSDictionary(dictionary: self.actionData ?? [:]).isEqual(to: object.actionData ?? [:]) else { return false }
      guard self.actionDate == object.actionDate else { return false }
      guard self.actionName == object.actionName else { return false }
      guard self.resource == object.resource else { return false }
      guard self.service == object.service else { return false }
      return true
    }

    public static func == (lhs: PCUserAuditLogRecord, rhs: PCUserAuditLogRecord) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
