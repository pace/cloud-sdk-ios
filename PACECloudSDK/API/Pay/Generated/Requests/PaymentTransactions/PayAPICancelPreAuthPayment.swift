//
// Generated by SwagGen
// https://github.com/pace/SwagGen
//

import Foundation

extension PayAPI.PaymentTransactions {

    /**
    Cancel PreAuth payment

    PreAuth payments can be canceled in case the token was not used already. In addition to the transaction, the payment token will be revoked as well.
<br><br>
* Canceling the transaction and or the token is only permitted if the transaction is still open, otherwise a `403 Forbidden` will be returned.
* In case the transaction and token are already canceled and the request is repeated, the result will still be `204 No Content`.
    */
    public enum CancelPreAuthPayment {

        public static var service = PayAPIService<Response>(id: "CancelPreAuthPayment", tag: "Payment Transactions", method: "POST", path: "/transactions/{transactionId}/cancel", hasBody: false, securityRequirements: [SecurityRequirement(type: "OAuth2", scopes: ["pay:transactions:cancel"]), SecurityRequirement(type: "OIDC", scopes: ["pay:transactions:cancel"])])

        public final class Request: PayAPIRequest<Response> {

            public struct Options {

                /** transaction ID. */
                public var transactionId: String

                public init(transactionId: String) {
                    self.transactionId = transactionId
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: CancelPreAuthPayment.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(transactionId: String) {
                let options = Options(transactionId: transactionId)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "transactionId" + "}", with: "\(self.options.transactionId)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = Void

            /** Canceled */
            case status204

            /** Bad request */
            case status400(PCPayErrors)

            /** OAuth token missing or invalid */
            case status401(PCPayErrors)

            /** Forbidden */
            case status403(PCPayErrors)

            /** Resource not found */
            case status404(PCPayErrors)

            /** The specified accept header is invalid */
            case status406(PCPayErrors)

            /** The specified content type header is invalid */
            case status415(PCPayErrors)

            /** The request was well-formed but was unable to be followed due to semantic errors. */
            case status422(PCPayErrors)

            /** Internal server error */
            case status500(PCPayErrors)

            /** Error occurred while communicating with upstream services */
            case status502(PCPayErrors)

            public var success: Void? {
                switch self {
                case .status204: return ()
                default: return nil
                }
            }

            public var failure: PCPayErrors? {
                switch self {
                case .status400(let response): return response
                case .status401(let response): return response
                case .status403(let response): return response
                case .status404(let response): return response
                case .status406(let response): return response
                case .status415(let response): return response
                case .status422(let response): return response
                case .status500(let response): return response
                case .status502(let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<Void, PCPayErrors> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .status400(let response): return response
                case .status401(let response): return response
                case .status403(let response): return response
                case .status404(let response): return response
                case .status406(let response): return response
                case .status415(let response): return response
                case .status422(let response): return response
                case .status500(let response): return response
                case .status502(let response): return response
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status204: return 204
                case .status400: return 400
                case .status401: return 401
                case .status403: return 403
                case .status404: return 404
                case .status406: return 406
                case .status415: return 415
                case .status422: return 422
                case .status500: return 500
                case .status502: return 502
                }
            }

            public var successful: Bool {
                switch self {
                case .status204: return true
                case .status400: return false
                case .status401: return false
                case .status403: return false
                case .status404: return false
                case .status406: return false
                case .status415: return false
                case .status422: return false
                case .status500: return false
                case .status502: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 204: self = .status204
                case 400: self = try .status400(decoder.decode(PCPayErrors.self, from: data))
                case 401: self = try .status401(decoder.decode(PCPayErrors.self, from: data))
                case 403: self = try .status403(decoder.decode(PCPayErrors.self, from: data))
                case 404: self = try .status404(decoder.decode(PCPayErrors.self, from: data))
                case 406: self = try .status406(decoder.decode(PCPayErrors.self, from: data))
                case 415: self = try .status415(decoder.decode(PCPayErrors.self, from: data))
                case 422: self = try .status422(decoder.decode(PCPayErrors.self, from: data))
                case 500: self = try .status500(decoder.decode(PCPayErrors.self, from: data))
                case 502: self = try .status502(decoder.decode(PCPayErrors.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
