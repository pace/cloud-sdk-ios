//
// Generated by SwagGen
// https://github.com/pace/SwagGen
//

import Foundation

extension UserAPI.OAuth2 {

    /**
    Exchange User  Token

    Creates a PACE token for a foreign token using the OIDC token-exchange.
The token provided **must** include the following claims (see https://datatracker.ietf.org/doc/html/rfc7519#page-9):
* Claim `aud`: e.g. `"api.pace.cloud"` audience of this token is PACE API, has to match the host requested via HTTP.
  In development or other environments the URL may be different therefore, e.g. `"api.dev.pace.cloud"`.
* Claim `iss`: e.g. `"https://as.example.com"` the issuer of the token, issuer needs to be known to PACE
* Claim `iat`: e.g. `1516239022` time the token was issued
* Claim `exp`: e.g. `1516249022` identifies the expiration time on or after which the JWT MUST NOT
  be accepted for processing
* Claim `sub`: e.g. `"03836e1f-58ed-4d67-baa0-a73bf77b9d5d"` unique account id on the issuer side
* Claim `email`: e.g. `"03836e1f-58ed-4d67-baa0-a73bf77b9d5d@as.example.com"` usually an account proxy email
  (will receive SMTP mails). Usually subject ID + issuer domain to provide a unique account id.
Optionally the token may contain:
* Claim `name`: e.g. `"Jane Doe"` full name of the user (used in emails addressed to the proxy)
* Claim `given_name`: e.g. `"Jane"` given name of the user
* Claim `family_name`: e.g. `"Doe"` family name of the user
* Claim `locale`: e.g. `"de"` or `"en-US"` language code of the user (format ISO 639-1 Alpha-2 [ISO639‑1] language code in lowercase and an ISO 3166-1 Alpha-2 [ISO3166‑1] country code in uppercase, separated by a dash) defaults to `"en"`
* Claim `zoneinfo`: e.g. `"Europe/Paris"` timezone information defaults to `"Europe/Berlin"` (TZ database)
RFCs for reference:
* https://datatracker.ietf.org/doc/html/rfc8693
* https://datatracker.ietf.org/doc/html/rfc7519
    */
    public enum TokenExchange {

        public static var service = UserAPIService<Response>(id: "TokenExchange", tag: "OAuth2", method: "POST", path: "/protocol/openid-connect/token", hasBody: true, securityRequirements: [])

        public final class Request: UserAPIRequest<Response> {

            public var body: PCUserOAuth2TokenExchangeRequest

            public init(body: PCUserOAuth2TokenExchangeRequest, encoder: RequestEncoder? = nil) {
                self.body = body
                super.init(service: TokenExchange.service) { defaultEncoder in
                    return try (encoder ?? defaultEncoder).encode(body)
                }
                self.contentType = "application/x-www-form-urlencoded"
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = PCUserOAuth2Token

            /** PACE Access Token. */
            case status200(PCUserOAuth2Token)

            /** The authorization of the client is invalid.
 */
            case status401(PCUserOAuth2Error)

            /** The token is not trusted and therefore rejected.
 */
            case status403(PCUserOAuth2Error)

            /** The request was rejected due to invalid request data, e.g. invalid token content.
 */
            case status422(PCUserOAuth2Error)

            /** Internal Server Error.
 */
            case status500(PCUserOAuth2Error)

            public var success: PCUserOAuth2Token? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var failure: PCUserOAuth2Error? {
                switch self {
                case .status401(let response): return response
                case .status403(let response): return response
                case .status422(let response): return response
                case .status500(let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<PCUserOAuth2Token, PCUserOAuth2Error> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .status401(let response): return response
                case .status403(let response): return response
                case .status422(let response): return response
                case .status500(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status401: return 401
                case .status403: return 403
                case .status422: return 422
                case .status500: return 500
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status401: return false
                case .status403: return false
                case .status422: return false
                case .status500: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(PCUserOAuth2Token.self, from: data))
                case 401: self = try .status401(decoder.decode(PCUserOAuth2Error.self, from: data))
                case 403: self = try .status403(decoder.decode(PCUserOAuth2Error.self, from: data))
                case 422: self = try .status422(decoder.decode(PCUserOAuth2Error.self, from: data))
                case 500: self = try .status500(decoder.decode(PCUserOAuth2Error.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
