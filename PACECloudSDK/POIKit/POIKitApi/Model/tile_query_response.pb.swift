// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tile_query_response.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct TileQueryResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = "TileQueryResponse"

  var zoom: UInt32 = 0

  var vectorTiles: [TileQueryResponse.VectorTile] = []

  var invalidationToken: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct VectorTile: SwiftProtobuf.Message {
    static let protoMessageName: String = TileQueryResponse.protoMessageName + ".VectorTile"

    var geo: TileQueryResponse.Coordinate {
      get { return _storage._geo ?? TileQueryResponse.Coordinate() }
      set { _uniqueStorage()._geo = newValue }
    }
    /// Returns true if `geo` has been explicitly set.
    var hasGeo: Bool { return _storage._geo != nil }
    /// Clears the value of `geo`. Subsequent reads from it will return its default value.
    mutating func clearGeo() { _storage._geo = nil }

    var vectorTiles: Data {
      get { return _storage._vectorTiles }
      set { _uniqueStorage()._vectorTiles = newValue }
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularMessageField(value: &_storage._geo)
          case 3: try decoder.decodeSingularBytesField(value: &_storage._vectorTiles)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if let v = _storage._geo {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
        if !_storage._vectorTiles.isEmpty {
          try visitor.visitSingularBytesField(value: _storage._vectorTiles, fieldNumber: 3)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  struct Coordinate: SwiftProtobuf.Message {
    static let protoMessageName: String = TileQueryResponse.protoMessageName + ".Coordinate"

    var x: UInt32 = 0

    var y: UInt32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &self.x)
        case 2: try decoder.decodeSingularUInt32Field(value: &self.y)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if self.x != 0 {
        try visitor.visitSingularUInt32Field(value: self.x, fieldNumber: 1)
      }
      if self.y != 0 {
        try visitor.visitSingularUInt32Field(value: self.y, fieldNumber: 2)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.zoom)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.vectorTiles)
      case 3: try decoder.decodeSingularUInt64Field(value: &self.invalidationToken)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.zoom != 0 {
      try visitor.visitSingularUInt32Field(value: self.zoom, fieldNumber: 1)
    }
    if !self.vectorTiles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.vectorTiles, fieldNumber: 2)
    }
    if self.invalidationToken != 0 {
      try visitor.visitSingularUInt64Field(value: self.invalidationToken, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension TileQueryResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "zoom"),
    2: .standard(proto: "vector_tiles"),
    3: .standard(proto: "invalidation_token")
  ]

  func _protobuf_generated_isEqualTo(other: TileQueryResponse) -> Bool {
    if self.zoom != other.zoom { return false }
    if self.vectorTiles != other.vectorTiles { return false }
    if self.invalidationToken != other.invalidationToken { return false }
    if unknownFields != other.unknownFields { return false }
    return true
  }
}

extension TileQueryResponse.VectorTile: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "geo"),
    3: .standard(proto: "vector_tiles")
  ]

  fileprivate class _StorageClass {
    var _geo: TileQueryResponse.Coordinate?
    var _vectorTiles: Data = SwiftProtobuf.Internal.emptyData

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _geo = source._geo
      _vectorTiles = source._vectorTiles
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: TileQueryResponse.VectorTile) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._geo != other_storage._geo { return false }
        if _storage._vectorTiles != other_storage._vectorTiles { return false }
        return true
      }
      if !storagesAreEqual { return false }
    }
    if unknownFields != other.unknownFields { return false }
    return true
  }
}

extension TileQueryResponse.Coordinate: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y")
  ]

  func _protobuf_generated_isEqualTo(other: TileQueryResponse.Coordinate) -> Bool {
    if self.x != other.x { return false }
    if self.y != other.y { return false }
    if unknownFields != other.unknownFields { return false }
    return true
  }
}
